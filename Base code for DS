
initial_memoryusage=df.memory_usage().sum()/(1024*1024)
def memory_management(df):
    for i in range(0,len(df.columns)):
        if "int" in str(df.dtypes.values[i]):
            min_value=df[df.columns[i]].min()
            max_value=df[df.columns[i]].max()
            if min_value>np.iinfo(np.int8).min and max_value<np.iinfo(np.int8).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.int8)
            elif min_value>np.iinfo(np.int16).min and max_value<np.iinfo(np.int16).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.int16)
            elif min_value>np.iinfo(np.int32).min and max_value<np.iinfo(np.int32).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.int32)
            elif min_value>np.iinfo(np.int64).min and max_value<np.iinfo(np.int64).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.int64)
        elif "float" in str(df.dtypes.values[i]):
            #print(df.columns[i],df.dtypes.values[i])
            min_value=df[df.columns[i]].min()
            max_value=df[df.columns[i]].max()
            if min_value>np.finfo(np.float16).min and max_value<np.finfo(np.float16).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.float16)
            elif min_value>np.finfo(np.float32).min and max_value<np.finfo(np.float32).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.float32)
            elif min_value>np.finfo(np.float64).min and max_value<np.finfo(np.float64).max:
                df[df.columns[i]]=df[df.columns[i]].astype(np.float64)
        else:
            pass
        return df
        
        -------------------------------------
        def null_value_treatment(df,threshold):
    ### calculating null value percentage
    print("null values before treatmenet")
    print(" ")
    print(df.isna().sum())
    null_value_percentage=(df.isna().sum()/df.shape[0])*100
    ### segregating null value percentage based on threshold
    drop_columns=null_value_percentage[null_value_percentage>threshold].index
    fill_columns=null_value_percentage[null_value_percentage<=threshold].index
    ### drop columns
    df.drop(drop_columns,axis=1,inplace=True) ### Fill columns #print(df[fill_columns].describe().columns) #print(df[fill_columns].describe(include='object').columns) #print(df[fill_columns].describe(include='category').columns)
    ### fill null values for numerical
    for i in df[fill_columns].describe().columns:
        df[i].fillna(df[i].median(),inplace=True) ### fill null values for object
    for i in df[fill_columns].describe(include='object').columns:
        df[i].fillna(df[i].value_counts().index[0],inplace=True)
   ### fill null values for categorical variables
   ### for i in house_data[fill_columns].describe(include='category').columns:
        # house_data[i].fillna(house_data[i].value_counts().index[0],inplace=True)
    print("null values after treatmenet")
    print(" ")
    print(df.isna().sum())
    return df

base_house_data=null_value_treatment(df,30)
--------------------------
def outlier(table_name):
    numerical_columns=table_name[table_name.describe().columns]
    cont_numerical_columns=[]
    discrete_numerical_columns=[]
    for i in numerical_columns:
        if numerical_columns[i].nunique()>8:
            cont_numerical_columns.append(i)
        else:
            discrete_numerical_columns.append(i)
    for i in cont_numerical_columns:
        fqrt=np.quantile(table_name[i].values,0.25)
        tqrt=np.quantile(table_name[i].values,0.75)
        #print(fqrt,tqrt)
        iqr=tqrt-fqrt
        utv=tqrt+1.5*iqr
        ltv=fqrt-1.5*iqr
        data=[]
    for i in table_name[i].values:
        if i>utv and i<ltv:
            print('outlier found')
            data.append(table_name[i].median())
        else:
            data.append(i)
    #table_name[i]=data
    ------------------------------------------
    from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
for i in base_house_data.describe(include='object').columns:
    lb.fit(base_house_data[i])
    data_points=lb.transform(base_house_data[i])
    base_house_data[i]=data_points
